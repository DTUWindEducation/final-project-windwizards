import numpy as np
from src.Blade import Blade
from src.OperationalCondition import OperationalCondition

class BladeElementTheory:
    def __init__(self, blade: Blade):
        """
        Initialize BladeElementTheory with a blade object.
        
        Parameters:
        - blade (Blade): Blade object containing geometry and operational conditions
        """
        self.blade = blade
        

    def compute_aerodynamic_performance(self, operational_condition: OperationalCondition):
        """
        Compute the aerodynamic performance of the blade.

        This method calculates the forces and moments acting on each blade element,
        as well as the total thrust, torque, power, and performance coefficients (CT and CP).

        Parameters:
        - blade (Blade): Blade object containing elements and operational conditions.

        Returns:
        - tuple: (total_thrust, total_torque, total_power, CT, CP)
          where:
            - total_thrust: Total thrust force acting on the rotor (N).
            - total_torque: Total torque generated by the rotor (Nm).
            - total_power: Total power generated by the rotor (W).
            - CT: Thrust coefficient (dimensionless).
            - CP: Power coefficient (dimensionless).
        """
        total_thrust = 0
        total_torque = 0

        # Get rotor properties
        R = self.blade.R
        A = np.pi * R**2  # Rotor area
        wind_speed = operational_condition.wind_speed  # Free stream velocity
        omega = operational_condition.omega  # Rotor angular velocity
        rho = operational_condition.rho  # Air density

        for element in self.blade.elements:
            # Get element properties
            r = element.r
            dr = element.dr
            alpha = element.alpha 
            phi = element.phi
            chord = element.chord
            Cl = element.cl
            Cd = element.cd
            a = element.a
            a_prime = element.a_prime

            # Calculate relative wind speed
            V_rel = np.sqrt(
                ((1 - a) * wind_speed)**2 + 
                ((1 + a_prime) * omega * r)**2
            )
            
            # Calculate lift and drag forces per unit length
            L = 0.5 * rho * V_rel**2 * chord * Cl
            D = 0.5 * rho * V_rel**2 * chord * Cd
            
            # Project forces to normal and tangential directions
            Fn = L * np.cos(phi) + D * np.sin(phi)
            Ft = L * np.sin(phi) - D * np.cos(phi)
            
            # Compute local contributions to thrust and torque
            dT = 4 * np.pi * r * rho * wind_speed**2 * a * (1 - a) * dr
            dM = 4 * np.pi * r**3 * rho * wind_speed * omega * a_prime * (1 - a) * dr
            
            # Store forces in element
            element.L = L
            element.D = D
            element.Fn = Fn
            element.Ft = Ft
            element.dT = dT
            element.dM = dM
            element.V_rel = V_rel

            # Add to totals
            total_thrust += dT
            total_torque += dM

        # Calculate total power
        total_power = total_torque * omega
        
        # Calculate coefficients
        denom_T = 0.5 * rho * A * wind_speed**2
        denom_P = 0.5 * rho * A * wind_speed**3
        
        ct = total_thrust / denom_T if denom_T != 0 else 0
        cp = total_power / denom_P if denom_P != 0 else 0

        return total_thrust, total_torque, total_power, ct, cp

